- name: Check if CrowdStrike service exists
  win_service:
    name: "{{ windows_crowdstrike_service_name }}"
  register: service_info
  tags: download

- name: Check if local_path_windows directory exists
  win_stat:
    path: "{{ local_path_windows }}"
  register: path_exists
  tags: download

- name: Ensure local_path_windows directory exists
  win_file:
    path: "{{ local_path_windows }}"
    state: directory
  when: not path_exists.stat.exists

- name: Get Crowdstrike installer file from S3 bucket if service is not present
  block:
  - name: Get Crowdstrike installer file from S3 bucket
    win_shell: |
      Copy-S3Object -BucketName {{ software_bucket_windows }} -Region {{ aws_region }} -Key {{ crowdstrike_win_exe }} -LocalFolder {{ local_path_windows }} -AccessKey {{ access_key }} -SecretKey {{ secret_key }}
    args:
      creates: "{{ local_path_windows }}\\{{ crowdstrike_win_exe }}"
    register: result

  - name: Set fact for installer download result
    set_fact:
      is_downloaded: "{{ not result.failed }}"
  when: not service_info.exists
  tags: download

  rescue:
  - name: Write error message to stdout
    debug:
      msg: "CrowdStrike Installer packages could not be downloaded or task was skipped due to service already being installed"

- name: Install Crowdstrike on Windows
  win_package:
    path: "{{ local_path_windows }}\\{{ crowdstrike_win_exe }}"
    state: present
    creates_service: "{{ windows_crowdstrike_service_name }}"
    arguments: "/install /quiet CID={{ crowdstrike_cid }}"
  register: service_installed
  when: is_downloaded is defined
  tags: install

- name: Write CrowdStrike Service install status to stdout
  debug:
    msg: "crowdstrike_installed: {{ 'true' if service_installed.changed == true else 'false' }}"
  when: service_installed is defined
  tags: install
