# Restart CrowdStrike Service on Linux
- name: Gather service facts
  service_facts:
  register: service_facts
  tags: restart

# Restart CrowdStrike Service
- name: Restart CrowdStrike Service
  block:
  - name: Stop Crowdstrike Service when init system is Systemd
    ansible.builtin.systemd:
      name: "{{ linux_crowdstrike_service_name }}"
      state: stopped
    register: service_stopped_systemd
    until: service_stopped_systemd.failed == false
    retries: 3
    delay: 60
    ignore_errors: true
    when:
    - service_facts.ansible_facts.services[linux_cs_service].source == "systemd"

  - name: Pause for 30 seconds
    pause:
      seconds: 30

  - name: Start Crowdstrike Service when init system is Systemd
    ansible.builtin.systemd:
      name: "{{ linux_crowdstrike_service_name }}"
      state: started
    register: service_restarted_systemd
    until: service_restarted_systemd.failed == false
    retries: 3
    delay: 60
    ignore_errors: true
    when:
    - service_facts.ansible_facts.services[linux_cs_service].source == "systemd"
    - service_stopped_systemd.state == "stopped"

  - name: Stop Crowdstrike Service when init system is SysVinit
    ansible.builtin.sysvinit:
      name: "{{ linux_crowdstrike_service_name }}"
      state: stopped
    register: service_stopped_sysv
    until: service_stopped_sysv.failed == false
    retries: 3
    delay: 60
    ignore_errors: true
    when:
    - service_facts.ansible_facts.services[linux_cs_service].source == "sysv"

  - name: Pause for 30 seconds
    pause:
      seconds: 30

  - name: Start Crowdstrike Service when init system is SysVinit
    ansible.builtin.sysvinit:
      name: "{{ linux_crowdstrike_service_name }}"
      state: started
    register: service_restarted_sysv
    until: service_restarted_sysv.failed == false
    retries: 3
    delay: 60
    ignore_errors: true
    when:
    - service_facts.ansible_facts.services[linux_cs_service].source == "sysv"
    - service_stopped_sysv.state == "stopped"
  when: service_facts is defined
  tags: restart

  rescue:
  - name: Write out error message
    debug:
      msg: "Failed to restart CrowdStrike service"
    tags: restart

# Write service restart status to stdoutS
- name: Write CrowdStrike Service restart status systemd to stdout
  debug:
    msg: "crowdstrike_restarted_systemd: {{ service_restarted_systemd.changed | default(false) }}"
  when: service_restarted_systemd is defined
  tags: restart

- name: Write CrowdStrike Service restart status sysv to stdout
  debug:
    msg: "crowdstrike_restarted_sysv: {{ service_restarted_sysv.changed | default(false) }}"
  when: crowdstrike_restarted_sysv is defined
  tags: restart
