---
- name: Get Crowdstrike RPM from S3 Bucket
  become: true
  remote_user: "{{ ansible_user }}"
  aws_s3:
    region: "{{ aws_region }}"
    mode: get
    bucket: "{{ s3_location }}"
    object: "software/{{ crowdstrike_linux_rpm }}"
    dest: "{{ ansible_env.HOME }}/{{ crowdstrike_linux_rpm }}"
    overwrite: different

- name: Get Crowdstrike Prereq from S3 Bucket
  become: true
  remote_user: "{{ ansible_user }}"
  aws_s3:
    region: "{{ aws_region }}"
    mode: get
    bucket: "{{ s3_location }}"
    object: "software/{{ crowdstrike_linux_prereq }}"
    dest: "{{ ansible_env.HOME }}/{{ crowdstrike_linux_prereq }}"
    overwrite: different
  when: (ansible_facts['distribution'] == "CentOS") or (ansible_facts['distribution'] == "Amazon")

- name: Install Crowdstrike Prereq
  command: rpm -ivh {{ crowdstrike_linux_prereq }}
  become: true
  become_method: sudo
  remote_user: "{{ ansible_user }}"
  args:
    chdir: "{{ ansible_env.HOME }}"
  when: 
   - (ansible_facts['distribution'] == "CentOS") or (ansible_facts['distribution'] == "Amazon")
   - install_libnl_crowdstrike

- name: Check if CrowdStrike is installed
  become: true
  become_method: sudo
  remote_user: "{{ ansible_user }}"
  stat:
    path: /opt/CrowdStrike/falconctl
  register: crowdstrike_installed
  
- name: Process the Crowdstrike RPM File
  command: rpm -ivh {{ crowdstrike_linux_rpm }}
  become: true
  become_method: sudo
  remote_user: "{{ ansible_user }}"
  args:
    chdir: "{{ ansible_env.HOME }}"
  when: not crowdstrike_installed.stat.exists

- name: Stop Crowdstrike Service
  command: service falcon-sensor stop
  become: true
  become_method: sudo
  remote_user: "{{ ansible_user }}"
  when: not crowdstrike_installed.stat.exists

- name: Configure Crowdstrike
  command: /opt/CrowdStrike/falconctl -s -f --cid={{ crowdstrike_cid }} --tags="{{ crowdstrike_grouping_product }},{{ crowdstrike_grouping_region }}"
  become: true
  become_method: sudo
  remote_user: "{{ ansible_user }}"
  when: not crowdstrike_installed.stat.exists

- name: Start Crowdstrike Service
  command: service falcon-sensor start
  become: true
  become_method: sudo
  remote_user: "{{ ansible_user }}"
  when: not crowdstrike_installed.stat.exists

- name: Remove Crowdstrike Installer
  file:
    path: "{{ ansible_env.HOME }}/{{ crowdstrike_linux_rpm }}"
    state: absent

- name: Remove Crowdstrike Pre-Req
  file:
    path: "{{ ansible_env.HOME }}/{{ crowdstrike_linux_prereq }}"
    state: absent